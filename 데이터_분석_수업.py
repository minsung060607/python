# -*- coding: utf-8 -*-
"""데이터_분석_수업.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13wmJ448I4vrw6oiqtC8cIStO1B5YO02z
"""

!pip install numpy
!pip install tensorflow
!pip install matplotlib
!pip install tensorflow_datasets

import numpy as np
import tensorflow as tf
import tensorflow_datasets as tfds
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import ModelCheckpoint

train_dataset = tfds.load('iris', split='train[:80%]')
valid_dataset = tfds.load('iris', split='train[:80%]')

def preprocessing(data):
  x = data['features']
  y = data['label']
  y = tf.one_hot(y, 3)
  #0->[1, 0, 0]
  #1->[0, 1, 0]
  #2->[0, 0, 1]
  return x,y

batch_size = 10
train_data = train_dataset.map(preprocessing).batch(batch_size)
valid_data = train_dataset.map(preprocessing).batch(batch_size)

for batch in train_data.take(3):
  print(batch[0])
  print(batch[1])

model = Sequential([
    Dense(1024, activation = 'relu', input_shape=(4,)),
    Dense(512, activation = 'relu'),
    Dense(256, activation = 'relu'),
    Dense(128, activation = 'relu'),
    Dense(64, activation = 'relu'),
    Dense(32, activation = 'relu'),
    Dense(16, activation = 'relu'),
    Dense(3, activation = 'softmax')
])

model.compile(optimizer='adam',
              loss = 'categorical_crossentropy',
              metrics = ['acc'])

checkpoint_path = 'checkpoint.ckpt'
checkpoint = ModelCheckpoint(
    filepath=checkpoint_path,
    save_weights_only=True,
    save_best_only=True,
    monitor='val_loss',
    verbose=1
)

epochs = 50
history = model.fit(train_data,
    validation_data = (valid_data),
    epochs = epochs,
    callbacks = [checkpoint]
    )

plt.figure(figsize=(12,9))
plt.plot(np.arange(1,epochs+1), history.history['loss'])
plt.plot(np.arange(1,epochs+1), history.history['val_loss'])
plt.title('Loss / Val Loss', fontsize = 20)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['loss','val_loss'], fontsize = 15)
plt.show()

model.load_weights(checkpoint_path)

tdata = np.array([[6.7,3.3,5.7,2.1]])
model.predict(tdata)